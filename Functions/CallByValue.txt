The execution of a function introduces a new symbol table used for the local variables of the function. More precisely, all variable assignments in a function store the value in the local symbol table; whereas variable references first look in the local symbol table, then in the local symbol tables of enclosing functions, then in the global symbol table, and finally in the table of built-in names. Thus, global variables and variables of enclosing functions cannot be directly assigned a value within a function (unless, for global variables, named in a global statement, or, for variables of enclosing functions, named in a nonlocal statement), although they may be referenced.

The actual parameters (arguments) to a function call are introduced in the local symbol table of the called function when it is called; thus, arguments are passed using call by value (where the value is always an object reference, not the value of the object).  When a function calls another function, a new local symbol table is created for that call.

Thus in this sense Call by value in reality is Call by object reference. 

x=5 (assign reference to int object 5 to x, Thus x holds reference to object 5)

f(x) (assign ref hold by argument x to formal parameter to x and add formal parameter x to symbol table).

if object whose ref is passed to the function is mutable, then changing the object inside function will also affect its values in caller function
